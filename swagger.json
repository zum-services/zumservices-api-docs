{
  "swagger": "2.0",
  "info": {
    "description": "<img src=\"logo.png\" style=\"display: block; margin-left: auto; margin-right: auto; width: 70%;\">\n\n# Intro\n\nThis website documents the API methods available for the `wallet-api` program.\n\nThe default API url is [127.0.0.1:17070](http://127.0.0.1:17070).\n\nNote that this program is distinct from `zum-service`, which uses a different API.\nThe api docs for `zum-service` can be found [here](https://api-docs.zumcoin.org/).\n\n# Initialization\n\n* Start by launching the `wallet-api` program.\n* From a terminal (or via a programming language):\n\n```\n./wallet-api --rpc-password somepassword\n```\n\n* Or if you're on windows:\n\n```\nwallet-api.exe --rpc-password somepassword\n```\n\n* An RPC password is always required, and you should then provide this password with every request to the API, in the `X-API-KEY` header.\n\n* If you want to see the available configuration options for the `wallet-api`, launch the program with:\n```\n./wallet-api --help\n```\n\n* Note that you cannot generate/open a wallet via the command line, only via the API.\n  This is by design to prevent application developers having to parse command line output.\n\n# Try it Out\n\nIf you want to test wallet-api out without doing any programming, you can use the 'Try it out' section in swagger.\n* Start by launching your wallet with CORS enabled:\n\n```\n./wallet-api --rpc-password \"mypassword\" --enable-cors \"*\"\n```\n\n* Click the 'Authorize' button in Swagger, and type in the RPC password you just chose - in this case, \"mypassword\", and click 'Authorize'.\n* Click a method to expand it, then click the 'Try it Out' button.\n* You can modify the parameters you want to send here, and then hit 'Execute' to send the request.\n* Note that this may not work in Firefox, I had to use Chrome to get it to work. F12 (developer console) may help diagnose CORS issues.\n\n# API Wrappers\n\nFinally, whilst you may send raw HTTP requests to the API url, you may be interested in an API/RPC wrapper.\n\nThese can be generated for many languages, by using the `Generate Client` option in the top menu.\nBe patient, this can take some time to complete.\n\n# Support\n\nIf you are having issues, please stop by our [discord](http://chat.zumcoin.org) and visit the `#dev_learning` channel for assistance.",
    "version": "1.2.1",
    "title": "wallet-api"
  },
  "tags": [
    {
      "name": "wallet",
      "description": "Opening and creating wallets"
    },
    {
      "name": "addresses",
      "description": "Creating addresses, importing addresses"
    },
    {
      "name": "node",
      "description": "Get node details, swap node"
    },
    {
      "name": "keys",
      "description": "Get private keys or mnemonic seed"
    },
    {
      "name": "transactions",
      "description": "Get a list of transactions, send a transaction"
    },
    {
      "name": "balance",
      "description": "Get a wallets or an addresses balance"
    },
    {
      "name": "misc",
      "description": "Miscellaneous operations, such as saving, getting status, etc"
    }
  ],
  "paths": {
    "/wallet/open": {
      "post": {
        "tags": [
          "wallet"
        ],
        "summary": "Opens an already existing wallet",
        "responses": {
          "200": {
            "$ref": "#/responses/Success"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/AlreadyOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Wallet"
            }
          }
        ]
      }
    },
    "/wallet/import/key": {
      "post": {
        "tags": [
          "wallet"
        ],
        "summary": "Imports a wallet with a private spend and view key",
        "responses": {
          "200": {
            "$ref": "#/responses/Success"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/AlreadyOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WalletKeyImport"
            }
          }
        ]
      }
    },
    "/wallet/import/seed": {
      "post": {
        "tags": [
          "wallet"
        ],
        "summary": "Imports a wallet using a mnemonic seed",
        "responses": {
          "200": {
            "$ref": "#/responses/Success"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/AlreadyOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WalletSeedImport"
            }
          }
        ]
      }
    },
    "/wallet/import/view": {
      "post": {
        "tags": [
          "wallet"
        ],
        "summary": "Imports a view only wallet with a private view key and public address",
        "description": "Note that view only wallets can only see incoming transactions, so balance may be inflated, and they cannot send transactions.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WalletViewImport"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Success"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/AlreadyOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/wallet/create": {
      "post": {
        "tags": [
          "wallet"
        ],
        "summary": "Creates a new wallet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Wallet"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Success"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/AlreadyOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/save": {
      "put": {
        "tags": [
          "misc"
        ],
        "summary": "Saves the wallet state",
        "responses": {
          "200": {
            "$ref": "#/responses/Success"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/reset": {
      "put": {
        "tags": [
          "misc"
        ],
        "summary": "Resets and saves the wallet, beginning scanning from height given, if any",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "scanHeight": {
                  "description": "The daemon port to sync the wallet with",
                  "type": "integer",
                  "example": 300000,
                  "default": 0,
                  "format": "int64"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Success"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/node": {
      "get": {
        "tags": [
          "node"
        ],
        "summary": "Gets the node address, port, fee, and fee address",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/Node"
                },
                {
                  "properties": {
                    "nodeFee": {
                      "type": "integer",
                      "description": "The fee the node you are connected to on each transaction (in atomic units)",
                      "example": 1000
                    },
                    "nodeAddress": {
                      "type": "string",
                      "description": "The address the node fee gets sent to, if non zero",
                      "example": "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787E2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "put": {
        "tags": [
          "node"
        ],
        "summary": "Sets the node address and port",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Node"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/Success"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/keys": {
      "get": {
        "tags": [
          "keys"
        ],
        "summary": "Gets the wallet containers shared private view key",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "privateViewKey": {
                  "type": "string",
                  "description": "The private view key",
                  "example": "85baeb8ae23bf266c68a5845f1ff13af7ff221f46e4dfc1293eec9a3e211a90a"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/keys/{address}": {
      "parameters": [
        {
          "$ref": "#/parameters/address"
        }
      ],
      "get": {
        "tags": [
          "keys"
        ],
        "summary": "Gets the public and private spend key for the given address",
        "description": "Note that this method cannot be used with a view only wallet",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "privateSpendKey": {
                  "type": "string",
                  "description": "The private spend key",
                  "example": "85baeb8ae23bf266c68a5845f1ff13af7ff221f46e4dfc1293eec9a3e211a90a"
                },
                "publicSpendKey": {
                  "type": "string",
                  "description": "The public spend key",
                  "example": "85baeb8ae23bf266c68a5845f1ff13af7ff221f46e4dfc1293eec9a3e211a90a"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/keys/mnemonic/{address}": {
      "parameters": [
        {
          "$ref": "#/parameters/address"
        }
      ],
      "get": {
        "tags": [
          "keys"
        ],
        "summary": "Gets the mnemonic seed for the given address, if possible",
        "description": "Note that this method cannot be used with a view only wallet",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "mnemonicSeed": {
                  "type": "string",
                  "description": "The mnemonic seed",
                  "example": "leech lifestyle newt tarnished vials weavers decay nerves buying taken sample after jailed cupcake token pavements welders gifts ferry keep humid abbey emails entrance leech"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/status": {
      "get": {
        "tags": [
          "misc"
        ],
        "summary": "Get the wallet sync status, peer count, and hashrate",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "walletBlockCount": {
                  "type": "integer",
                  "format": "uint64",
                  "description": "The amount of blocks the wallet has scanned",
                  "example": 100000
                },
                "localDaemonBlockCount": {
                  "type": "integer",
                  "format": "uint64",
                  "description": "The amount of blocks the daemon the wallet is connected to has synced",
                  "example": 800000
                },
                "networkBlockCount": {
                  "type": "integer",
                  "format": "uint64",
                  "description": "The amount of blocks the network has",
                  "example": 900000
                },
                "peerCount": {
                  "type": "integer",
                  "format": "uint32",
                  "description": "The amount of peers (incoming + outgoing) peers the daemon has",
                  "example": 20
                },
                "hashrate": {
                  "type": "integer",
                  "format": "uint64",
                  "description": "The hashrate the last local block the daemon knows about has",
                  "example": 123456789
                },
                "isViewWallet": {
                  "type": "boolean",
                  "description": "Whether this wallet is a view only wallet. Certain operations are illegal on a view only wallet, such as transferring.",
                  "example": false
                },
                "subWalletCount": {
                  "type": "integer",
                  "description": "The amount of subwallets in the container",
                  "example": 1
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/addresses": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Gets a list of all addresses in the wallet container",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "addresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787E2cT32cZbF6KvnU69LNxptYFBMCKs3yqLmCAVjPW4rNTExpB7RpGKGJEkD1E9MVmM8SUUJfUh42Ajo1Hgz5wUN6budvzaq"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/addresses/{address}": {
      "parameters": [
        {
          "$ref": "#/parameters/address"
        }
      ],
      "delete": {
        "tags": [
          "addresses"
        ],
        "summary": "Deletes the given subwallet from the container",
        "description": "Note that you cannot delete the 'primary' address, the first address created in the wallet.",
        "responses": {
          "200": {
            "$ref": "#/responses/Success"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/addresses/primary": {
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Gets the 'primary' address",
        "description": "The primary address is the first wallet created, and the one used as the change address if not specified.",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "The primary address",
                  "example": "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787E"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/addresses/create": {
      "post": {
        "tags": [
          "addresses"
        ],
        "summary": "Creates a new, random address in the wallet container",
        "responses": {
          "201": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "The created address",
                  "example": "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787E2cT32cZbF6KvnU69LNxptYFBMCKs3yqLmCAVjPW4rNTExpB7RpGKGJEkD1E9MVmM8SUUJfUh42Ajo1Hgz5wUN6budvzaq"
                },
                "privateSpendKey": {
                  "type": "string",
                  "description": "The corresponding private spend key for this address, can be used to restore along with the shared private view key",
                  "example": "6d4a7c160cbd4c9de33eeb161ff30539d2e28b447eb5af73523cc3379c591c83"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/addresses/import": {
      "post": {
        "tags": [
          "addresses"
        ],
        "summary": "Imports a subwallet with the given private spend key",
        "description": "It is HIGHLY recommended you provide a scan height with this operation - wallet syncing will have to begin again from the scan height given (defaults to zero) if the scan height is less than the height of the current wallet sync status.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "required": [
                "privateSpendKey"
              ],
              "properties": {
                "scanHeight": {
                  "description": "The daemon port to sync the wallet with",
                  "type": "integer",
                  "example": 300000,
                  "default": 0,
                  "format": "uint64"
                },
                "privateSpendKey": {
                  "description": "64 char hex private spend key",
                  "type": "string",
                  "example": "5c703d9bde0b7cd5ff3e19ea826a44066534661a7322c85e854e73f06e49cd06"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "The created address",
                  "example": "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787E2cT32cZbF6KvnU69LNxptYFBMCKs3yqLmCAVjPW4rNTExpB7RpGKGJEkD1E9MVmM8SUUJfUh42Ajo1Hgz5wUN6budvzaq"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/addresses/import/view": {
      "post": {
        "tags": [
          "addresses"
        ],
        "summary": "Imports a view only subwallet with the given publicSpendKey",
        "description": "It is HIGHLY recommended you provide a scan height with this operation - wallet syncing will have to begin again from the scan height given (defaults to zero) if the scan height is less than the height of the current wallet sync status.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "required": [
                "publicSpendKey"
              ],
              "properties": {
                "scanHeight": {
                  "description": "The daemon port to sync the wallet with",
                  "type": "integer",
                  "example": 300000,
                  "default": 0,
                  "format": "uint64"
                },
                "privateSpendKey": {
                  "description": "64 char hex public spend key",
                  "type": "string",
                  "example": "5c703d9bde0b7cd5ff3e19ea826a44066534661a7322c85e854e73f06e49cd06"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "description": "The created address",
                  "example": "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787E2cT32cZbF6KvnU69LNxptYFBMCKs3yqLmCAVjPW4rNTExpB7RpGKGJEkD1E9MVmM8SUUJfUh42Ajo1Hgz5wUN6budvzaq"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/addresses/{address}/{paymentID}": {
      "parameters": [
        {
          "$ref": "#/parameters/address"
        },
        {
          "$ref": "#/parameters/paymentID"
        }
      ],
      "get": {
        "tags": [
          "addresses"
        ],
        "summary": "Creates an integrated address from an address and payment ID",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "integratedAddress": {
                  "type": "string",
                  "description": "The integrated address",
                  "example": "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787ExiNXhy96RNDkv2jx29jL7GdTWYBmA4r7K8KRpDWA4hJJnTZEgFHFzxqvmBLtz94oF4uPokQdHbV9j2g7S6LA4hKPvjZEFS2CiAj6DL8isYELmTec8Z9BK56oL1KMhjMRSMyfwYaogKg17hQKC23CHPBcHqrHHGzdRYUk3HGqkMwXbHg3BoCpXD"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Gets a list of all transactions in the wallet container",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "transactions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Transaction"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/transactions/hash/{hash}": {
      "parameters": [
        {
          "$ref": "#/parameters/hash"
        }
      ],
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Gets details on the given transaction, if found",
        "description": "Note that the transaction must be contained in this wallet, and must not be unconfirmed. E.g, you must get this hash back when calling /transactions",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "transactions": {
                  "$ref": "#/definitions/Transaction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "404": {
            "description": "The transaction hash was not found."
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/transactions/unconfirmed": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Gets a list of all unconfirmed, outgoing transactions in the wallet container",
        "description": "Note that this DOES NOT include incoming transactions in the pool. This only applies to transactions that have been sent by this wallet file, and have not been added to a block yet.",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "transactions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Transaction"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/transactions/unconfirmed/{address}": {
      "parameters": [
        {
          "$ref": "#/parameters/address"
        }
      ],
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Gets a list of unconfirmed, outgoing transactions, for the given address",
        "description": "Note that this DOES NOT include incoming transactions in the pool. This only applies to transactions that have been sent by this wallet file, and have not been added to a block yet.",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "transactions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Transaction"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/transactions/{startHeight}": {
      "parameters": [
        {
          "$ref": "#/parameters/startHeight"
        }
      ],
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Returns transactions for the wallet starting at start height for 1,000 blocks",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "transactions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Transaction"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/transactions/{startHeight}/{endHeight}": {
      "parameters": [
        {
          "$ref": "#/parameters/startHeight"
        },
        {
          "$ref": "#/parameters/endHeight"
        }
      ],
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Returns transactions for the wallet starting at start height until end height",
        "description": "Note that start height must be < end height",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "transactions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Transaction"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/transactions/address/{address}/{startHeight}": {
      "parameters": [
        {
          "$ref": "#/parameters/address"
        },
        {
          "$ref": "#/parameters/startHeight"
        }
      ],
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Returns transactions for the wallet starting at start height for 1,000 blocks, that belong to the given address",
        "description": "Note that the transfers array will still contain transfers to other addresses, if present",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "transactions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Transaction"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/transactions/address/{address}/{startHeight}/{endHeight}": {
      "parameters": [
        {
          "$ref": "#/parameters/address"
        },
        {
          "$ref": "#/parameters/startHeight"
        },
        {
          "$ref": "#/parameters/endHeight"
        }
      ],
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Returns transactions for the wallet starting at start height until end height, that belong to the given address",
        "description": "Note that start height must be < end height. Also note that the transfers array will still contain transfers to other addresses, if present.",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "transactions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Transaction"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/transactions/send/basic": {
      "post": {
        "tags": [
          "transactions"
        ],
        "summary": "Sends a transaction",
        "description": "This method will take funds from all subwallets as needed, and will use the primary address as the change address. It also uses a default fee, and default mixin. If this is not acceptable, please use the /advanced call instead.",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "transactionHash": {
                  "type": "string",
                  "example": "396e2a782c9ce9993982c6f93e305b05306d0e5794f57157fbac78581443c55f"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "required": [
                "address",
                "amount"
              ],
              "properties": {
                "destination": {
                  "type": "string",
                  "description": "The address to send funds to",
                  "example": "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787E2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
                },
                "amount": {
                  "type": "number",
                  "format": "uint64",
                  "description": "The amount of ZUM to send (in atomic units)",
                  "example": 1234
                },
                "paymentID": {
                  "type": "string",
                  "description": "The payment ID to use",
                  "example": "38a8224a4c8bc5f060555cf9e89551dcd0cbb1c587a52b63e98f71280c362ee4"
                }
              }
            }
          }
        ]
      }
    },
    "/transactions/send/advanced": {
      "post": {
        "tags": [
          "transactions"
        ],
        "summary": "Sends a transaction",
        "description": "Note that every parameters sans destinations is optional.",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "transactionHash": {
                  "type": "string",
                  "example": "396e2a782c9ce9993982c6f93e305b05306d0e5794f57157fbac78581443c55f"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "required": [
                "destinations"
              ],
              "properties": {
                "destinations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "string",
                        "description": "The address to send to",
                        "example": "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787E2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
                      },
                      "amount": {
                        "type": "number",
                        "format": "uint64",
                        "description": "The amount of ZUM to send (in atomic units)",
                        "example": 1234
                      }
                    }
                  }
                },
                "mixin": {
                  "type": "number",
                  "description": "The mixin level to use",
                  "example": 3,
                  "default": "The default mixin defined by the core software for the current height"
                },
                "fee": {
                  "type": "number",
                  "description": "The fee to use with this transaction (in atomic units)",
                  "example": 10,
                  "default": "The minimum network fee (currently 10)"
                },
                "sourceAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787E2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
                  },
                  "description": "The addresses to draw funds for the transaction from (must be an address in this container). Defaults to every address.",
                  "default": "Every address in the container."
                },
                "paymentID": {
                  "type": "string",
                  "description": "The payment ID to use",
                  "example": "38a8224a4c8bc5f060555cf9e89551dcd0cbb1c587a52b63e98f71280c362ee4",
                  "default": "No payment ID"
                },
                "changeAddress": {
                  "type": "string",
                  "description": "The address in this wallet to return any 'change' to if we have to spend more than the requested amount. Defaults to primary address.",
                  "example": "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787E2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW",
                  "default": "Wallet container primary address"
                },
                "unlockTime": {
                  "type": "number",
                  "description": "When to unlock the transaction. A user cannot spend locked funds until the unlock time has been reached. Defaults to zero if not given. Can use either a block height, or a unix timestamp.",
                  "example": 1200000,
                  "default": 0
                }
              }
            }
          }
        ]
      }
    },
    "/transactions/send/fusion/basic": {
      "post": {
        "tags": [
          "transactions"
        ],
        "summary": "Sends a fusion transaction",
        "description": "Fusion transactions are zero fee, and seek to combine small inputs into larger ones, to allow for larger transactions. Many fusions may be required to fully optimize a wallet.",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "transactionHash": {
                  "type": "string",
                  "example": "396e2a782c9ce9993982c6f93e305b05306d0e5794f57157fbac78581443c55f"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/transactions/send/fusion/advanced": {
      "post": {
        "tags": [
          "transactions"
        ],
        "summary": "Sends a fusion transaction",
        "description": "Fusion transactions are zero fee, and seek to combine small inputs into larger ones, to allow for larger transactions. Many fusions may be required to fully optimize a wallet.",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "transactionHash": {
                  "type": "string",
                  "example": "396e2a782c9ce9993982c6f93e305b05306d0e5794f57157fbac78581443c55f"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "mixin": {
                "type": "number",
                "description": "The mixin level to use",
                "example": 3
              },
              "sourceAddresses": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787E2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
                },
                "description": "The addresses to draw funds for the transaction from (must be an address in this container)"
              },
              "destination": {
                "type": "string",
                "description": "The destination address to send funds to. Must exist in this wallet.",
                "example": "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787E2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
              }
            }
          }
        }
      ]
    },
    "/transactions/privatekey/{hash}": {
      "parameters": [
        {
          "$ref": "#/parameters/hash"
        }
      ],
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Gets the transaction private key of the given transaction. This can be used to audit a transaction.",
        "description": "The transaction must have been sent by this wallet container. If the wallet container has been reimported, it will not be present.",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "transactionPrivateKey": {
                  "type": "string",
                  "example": "199c0b9c40e192f1917a2f317c72fb6684081c744c3286793e6d63b5d3f6930a",
                  "description": "The transaction private key"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/balance": {
      "get": {
        "tags": [
          "balance"
        ],
        "summary": "Get the balance for the entire wallet container",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "unlocked": {
                  "type": "number",
                  "format": "uint64",
                  "description": "Unlocked, spendable balance. In atomic units.",
                  "example": 1234
                },
                "locked": {
                  "type": "number",
                  "format": "uint64",
                  "description": "Locked, unspendable balance. Possibly unconfirmed change, or a transaction with an unlock time specified. In atomic units.",
                  "example": 123
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/balance/{address}": {
      "parameters": [
        {
          "$ref": "#/parameters/address"
        }
      ],
      "get": {
        "tags": [
          "balance"
        ],
        "summary": "Get the balance for a specific address",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "unlocked": {
                  "type": "number",
                  "format": "uint64",
                  "description": "Unlocked, spendable balance. In atomic units.",
                  "example": 1234
                },
                "locked": {
                  "type": "number",
                  "format": "uint64",
                  "description": "Locked, unspendable balance. Possibly unconfirmed change, or a transaction with an unlock time specified. In atomic units.",
                  "example": 123
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/balances": {
      "get": {
        "tags": [
          "balance"
        ],
        "summary": "Get the balance for every address",
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "schema": {
              "type": "array",
              "items": {
                "properties": {
                  "unlocked": {
                    "type": "number",
                    "format": "uint64",
                    "description": "Unlocked, spendable balance. In atomic units.",
                    "example": 1234
                  },
                  "locked": {
                    "type": "number",
                    "format": "uint64",
                    "description": "Locked, unspendable balance. Possibly unconfirmed change, or a transaction with an unlock time specified. In atomic units.",
                    "example": 123
                  },
                  "address": {
                    "type": "string",
                    "description": "The address this balance belongs to",
                    "example": "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787E2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/responses/NotOpen"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "X-API-KEY",
      "in": "header",
      "description": "Your rpc password that you supplied on starting the wallet API."
    }
  },
  "responses": {
    "UnauthorizedError": {
      "description": "API key is missing or invalid."
    },
    "AlreadyOpen": {
      "description": "A wallet is already open. Call DELETE on /wallet first, to close it."
    },
    "Success": {
      "description": "The operation completed successfully."
    },
    "BadRequest": {
      "description": "A parse error occured, or an error occured processing your request.",
      "schema": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "integer",
            "description": "A numeric code representing the error, for programmatic use. Error code mappings can be found here - https://github.com/zumcoin-org/zumcoin/blob/development/src/WalletBackend/WalletErrors.h We will endeavour to not change these mappings.",
            "example": 5
          },
          "errorMessage": {
            "type": "string",
            "description": "A human readable error message, for displaying to the user. It is suggested for programmers to not pattern match on these, and instead use the errorCode.",
            "example": "The password given for this wallet is incorrect."
          }
        }
      }
    },
    "NotOpen": {
      "description": "This operation requires a wallet to be open, and one has not been opened."
    },
    "InternalError": {
      "description": "An exception was thrown whilst processing the request. See the console for logs."
    }
  },
  "security": [
    {
      "api_key": []
    }
  ],
  "definitions": {
    "Wallet": {
      "required": [
        "filename",
        "password"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Node"
        },
        {
          "properties": {
            "filename": {
              "description": "The filename to store/load the wallet from. Note that this is relative to where zum-wallet-api was launched from - it is recommended you use an absolute path.",
              "type": "string",
              "example": "mywallet.wallet"
            },
            "password": {
              "description": "The password used to open the wallet",
              "type": "string",
              "example": "supersecretpassword"
            }
          }
        }
      ]
    },
    "WalletImport": {
      "allOf": [
        {
          "$ref": "#/definitions/Wallet"
        },
        {
          "properties": {
            "scanHeight": {
              "description": "The daemon port to sync the wallet with",
              "type": "integer",
              "example": 300000,
              "default": 0,
              "format": "uint64"
            }
          }
        }
      ]
    },
    "WalletKeyImport": {
      "required": [
        "privateViewKey",
        "privateSpendKey"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/WalletImport"
        },
        {
          "properties": {
            "privateViewKey": {
              "description": "64 char hex private view key",
              "type": "string",
              "example": "493f522e1f46b5c07f753ed28dc2db9da5f571f28c2fa54f4c9a0a7941b09d0b"
            },
            "privateSpendKey": {
              "description": "64 char hex private spend key",
              "type": "string",
              "example": "5c703d9bde0b7cd5ff3e19ea826a44066534661a7322c85e854e73f06e49cd06"
            }
          }
        }
      ]
    },
    "WalletSeedImport": {
      "required": [
        "mnemonicSeed"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/WalletImport"
        },
        {
          "properties": {
            "mnemonicSeed": {
              "description": "The 25 words mnemonic seed",
              "type": "string",
              "example": "cynical waveform sixteen husband zebra ritual vexed jaws eccentric jewels toenail having nabbing wept nozzle grunt tipsy flying pegs feel upright lower racetrack sapling sapling"
            }
          }
        }
      ]
    },
    "WalletViewImport": {
      "required": [
        "privateViewKey",
        "address"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/WalletImport"
        },
        {
          "properties": {
            "privateViewKey": {
              "description": "64 char hex private view key",
              "type": "string",
              "example": "493f522e1f46b5c07f753ed28dc2db9da5f571f28c2fa54f4c9a0a7941b09d0b"
            },
            "address": {
              "description": "99 char public ZUM address",
              "type": "string",
              "example": "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787E2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
            }
          }
        }
      ]
    },
    "Node": {
      "type": "object",
      "properties": {
        "daemonHost": {
          "description": "The daemon host to sync the wallet with",
          "type": "string",
          "example": "127.0.0.1",
          "default": "127.0.0.1"
        },
        "daemonPort": {
          "description": "The daemon port to sync the wallet with",
          "type": "integer",
          "format": "uint16",
          "default": 17935,
          "example": 17935
        }
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "blockHeight": {
          "type": "number",
          "format": "uint64",
          "example": 800000,
          "description": "The block this transaction is contained in."
        },
        "fee": {
          "type": "number",
          "format": "uint64",
          "example": 10,
          "description": "The amount the sender paid in miner fees for this transaction. In atomic units."
        },
        "hash": {
          "type": "string",
          "example": "8e2dc89659409ea9c34a2e28f7350cefba304159c04cc4926acd12035a8b2379",
          "description": "The hash of this transaction"
        },
        "isCoinbaseTransaction": {
          "type": "boolean",
          "example": false,
          "description": "Whether this transaction is a miner reward or a normal transaction."
        },
        "paymentID": {
          "type": "string",
          "example": "7fe73bd90ef05dea0b5c15fc78696619c50dd5f2ba628f2fd16a2e3445b1922f",
          "description": "An identifier supplied by the sender. May be \"\" (empty string)"
        },
        "timestamp": {
          "type": "number",
          "format": "uint64",
          "example": 1543222082,
          "description": "The unix timestamp of the block this transaction is contained in."
        },
        "unlockTime": {
          "type": "number",
          "format": "uint64",
          "example": 0,
          "description": "When this transaction unlocks for spending. If >= 50000000, treated as a timestamp. Normally zero."
        },
        "transfers": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "example": "Zum1yiVt3UDGr5XwUpvdeNbG5c7ufBLPR85hY43gGXMqcuM2y4ZNBQdEBAj76BqdtjHuCnbDRZWdoQkAbs5MMCbubsyHS5T787E3ErzkY2CiAj6DL8isYELmTec8Z9BK56oL1KMhjMRSMyfwYaogKg17hQKC23CHPBcHqrHHGzdRYUk3HGqkMwXbHg3Dy2rH",
              "description": "The receiving address of this transfer, or the sending address if the amount is negative"
            },
            "amount": {
              "type": "number",
              "format": "int64",
              "example": 1234,
              "description": "The amount of this transfer, in atomic units"
            }
          }
        }
      }
    }
  },
  "host": "127.0.0.1:17070",
  "schemes": [
    "http"
  ],
  "parameters": {
    "address": {
      "in": "path",
      "name": "address",
      "required": true,
      "type": "string",
      "description": "The address to use for this operation. Should be a valid, 99 character ZUM address."
    },
    "paymentID": {
      "in": "path",
      "name": "paymentID",
      "required": true,
      "type": "string",
      "description": "The payment ID to use for this operation. Should be a 64 char hex string."
    },
    "hash": {
      "in": "path",
      "name": "hash",
      "required": true,
      "type": "string",
      "description": "The transaction hash to use for this operation. Should be a 64 char hex string."
    },
    "startHeight": {
      "in": "path",
      "name": "startHeight",
      "required": true,
      "type": "number",
      "description": "The starting block height to use for this operation."
    },
    "endHeight": {
      "in": "path",
      "name": "endHeight",
      "required": true,
      "type": "number",
      "description": "The ending block height to use for this operation."
    }
  }
}
